#
# 2025.07.23  编译 Lede-18.06-ARMv8_FOL
#
name: 编译Lede1806_FOL

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
# 定时触发开始编译(把下面两个#去掉开启,时间设置请看定时编译说明)
#  schedule:
#   - cron: 0 16 */2 * *

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: aarch64/Lede1806/feeds.conf.default
  CONFIG_FILE: aarch64/Lede1806/Lede1806_FOL.config
  DIY_P1_SH: aarch64/Lede1806/1806diy-part1.sh
  DIY_P2_SH: aarch64/Lede1806/1806diy-part2.sh
  TZ: Asia/Shanghai
  FILE_NAME: Build1806
  PRODUCT_NAME: Build1806_FOL

jobs:
  build:
    runs-on: ubuntu-22.04
    #if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id

    name: 编译Lede1806
    strategy:
      fail-fast: false
      
    steps:
    - name: 准备
      uses: actions/checkout@master

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

    - name: 部署编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        [span_0](start_span)docker rmi `docker images -q`[span_0](end_span)
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
        sudo -E apt -y purge azure-cli* docker* ghc* zulu* firefox google* dotnet* powershell* openjdk* mysql* mongodb* dotnet* snap* aspnetcore*
        [ -n "$AGENT_TOOLSDIRECTORY" ] && sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo -E apt update
        [span_1](start_span)sudo -E apt -y install $(curl -fsSL https://tinyurl.com/ubuntu2204-make-openwrt) subversion clang llvm[span_1](end_span)
        sudo -E apt -y autoremove --purge
        sudo -E systemctl daemon-reload
        sudo -E apt clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        echo "status=success" >> $GITHUB_OUTPUT
        [span_2](start_span)df -Th[span_2](end_span)
  
    - name: 创建模拟物理磁盘
      run: |
        [span_3](start_span)mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)[span_3](end_span)
        root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
        sudo truncate -s "${mnt_size}"G /mnt/mnt.img
        sudo truncate -s "${root_size}"G /root.img
        sudo losetup /dev/loop6 /mnt/mnt.img
        sudo losetup /dev/loop7 /root.img
        [span_4](start_span)sudo pvcreate /dev/loop6[span_4](end_span)
        sudo pvcreate /dev/loop7
        sudo vgcreate github /dev/loop6 /dev/loop7
        sudo lvcreate -n runner -l 100%FREE github
        sudo mkfs.xfs /dev/github/runner
        sudo mkdir -p /workdir
        sudo mount /dev/github/runner /workdir
        sudo chown -R runner.runner /workdir
        df -Th

    - name: 检查服务器性能
      [span_5](start_span)run: |[span_5](end_span)
        echo "警告⚠"
        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo "已知编译成功CPU型号：8370C,8171M"
        echo "已知性能不足CPU型号：8272CL"
        echo -e "-------------- ------------CPU信息------------------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "-------------------------------内存信息-------------------------------------------"
        echo "已安装内存详细信息："
        [span_6](start_span)sudo lshw -short -C memory |[span_6](end_span)
        [span_7](start_span)grep GiB[span_7](end_span)
        echo -e "\n"
        echo "-----------------------------硬盘信息---------------------------------------------"
        echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "硬盘详情："
        df -Th

    - name: 下载源码
      working-directory: /workdir
      run: |
        [span_8](start_span)df -hT $PWD[span_8](end_span)
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "DATE1=$(date "+%Y-%m-%d")" >> $GITHUB_ENV

    # - name: 缓存加速
    #   [span_9](start_span)uses: klever1988/cachewrtbuild@main[span_9](end_span)
    #   # uses: stupidloud/cachewrtbuild@main
    #   # with:
    #     # mixkey: 'Build1806'
    #     # ccache: true
    #     # skip: true
    #     # toolchain: true
    #     # clean: false
    #     # prefix: ${{ github.workspace }}/openwrt

    - name: 更新软件包
      working-directory: openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 准备OpenWrt配置并应用自定义
      working-directory: openwrt
      run: |
        echo "Applying custom feeds.conf.default if it exists..."
        [ -e ../${{ env.FEEDS_CONF }} ] && cp ../${{ env.FEEDS_CONF }} ./feeds.conf.default
        
        echo "Executing DIY-part1 script..."
        chmod +x ../${{ env.DIY_P1_SH }}
        ../${{ env.DIY_P1_SH }}

        echo "Copying custom .config from ${{ env.CONFIG_FILE }} to openwrt/.config"
        cp ../${{ env.CONFIG_FILE }} ./.config
        
        echo "Applying custom files if 'files' directory exists..."
        [ -e ../files ] && cp -r ../files . # If you have a 'files' directory at the root of your repo
        
        echo "Executing DIY-part2 script..."
        chmod +x ../${{ env.DIY_P2_SH }}
        ../${{ env.DIY_P2_SH }}
        
        echo "Modifying default IP and hostname..."
        sed -i 's/192.168.1.1/192.168.2.1/g' package/base-files/files/bin/config_generate
        sed -i 's/OpenWrt/MRG AutoBuild ${{ env.DATE1 }} @ OpenWrt/g' package/lean/default-settings/files/zzz-default-settings

        echo "Running make defconfig to ensure configuration integrity."
        make defconfig

        echo "Verifying .config target architecture:"
        grep "CONFIG_TARGET_ARCH_PACKAGES" .config || true
        grep "CONFIG_TARGET_armvirt_64" .config || true
        grep "CONFIG_TARGET_x86" .config || true # 确认x86没有被设置

    - name: 下载软件包
      id: package
      working-directory: openwrt
      [span_10](start_span)run: |[span_10](end_span)
        make download -j$(nproc) || make download -j1 # Fallback to single job if parallel fails
        [span_11](start_span)find dl -size -1024c -exec ls -l {} \;[span_11](end_span)
        [span_12](start_span)find dl -size -1024c -exec rm -f {} \;[span_12](end_span)
        rm -rf $GITHUB_WORKSPACE/.git
        rm -rf $GITHUB_WORKSPACE/opt
        df -Th

    - name: 编译固件
      id: compile
      working-directory: openwrt
      [span_13](start_span)run: |[span_13](end_span)
        echo -e "$(nproc) thread compile"
        [span_14](start_span)make -j$(nproc) ||[span_14](end_span)
        [span_15](start_span)make -j1 || make -j1 V=s[span_15](end_span)
        [span_16](start_span)grep '^CONFIG_TARGET.*DEVICE.*=y' .config |[span_16](end_span)
        [span_17](start_span)sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME[span_17](end_span)
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "DATE_YMD=_$(date +"%Y%m%d")" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 清理服务器空间
      if: steps.compile.outputs.status == 'success' && !cancelled()
      [span_18](start_span)run: |[span_18](end_span)
        cd openwrt/
        rm -rf $(ls . | grep -v "^bin$" | xargs) 2>/dev/null
        df -hT ${PWD}
  
    - name: 整理固件文件夹
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      [span_19](start_span)run: |[span_19](end_span)
        cd $GITHUB_WORKSPACE/openwrt/bin/packages
        tar -zcvf AllPackages.tar.gz ./*
        cp AllPackages.tar.gz $GITHUB_WORKSPACE/openwrt/bin/targets/*/*
        cd $GITHUB_WORKSPACE/openwrt/bin/targets/armvirt/64/ # Assuming this is your target path based on .config
        rm -rf packages sha256sums feeds.buildinfo openwrt-armvirt-64-default.manifest openwrt-armvirt-64-Image openwrt-armvirt-64-rootfs-ext4.img version.buildinfo openwrt-armvirt-64-generic-initramfs-kernel.bin openwrt-armvirt-64-generic-kernel.bin openwrt-armvirt-64-generic.manifest profiles.json
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 再次检查服务器性能
      [span_20](start_span)run: |[span_20](end_span)
        echo "警告⚠"
        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo "已知编译成功CPU型号：8370C,8171M"
        echo "已知性能不足CPU型号：8272CL"
        echo -e "-------------- ------------CPU信息------------------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "-------------------------------内存信息-------------------------------------------"
        echo "已安装内存详细信息："
        [span_21](start_span)sudo lshw -short -C memory |[span_21](end_span)
        [span_22](start_span)grep GiB[span_22](end_span)
        echo -e "\n"
        echo "-----------------------------硬盘信息---------------------------------------------"
        echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "硬盘详情："
        df -Th

    - name: 固件发布信息
      id: release
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.FILE_NAME }}
        [span_23](start_span)allowUpdates: true[span_23](end_span)
        tag: ${{ env.FILE_NAME }}
        commit: master
        token: ${{ secrets.RELEASES_TOKEN }}
        [span_24](start_span)body: |[span_24](end_span)
          编译Lede 18.06固件，Flippy打包用！
          当前使用版本:【编译前的最后一次[➦主源码](https://github.com/coolsnowwolf/lede)更新记录】
          ${{ env.useVersionInfo }}
        artifacts: ${{ env.FIRMWARE }}/*

    - name: 电报机器人信息通知
      if: steps.organize.outputs.status == 'success' && !cancelled()
      run: curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }}编译完成" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

