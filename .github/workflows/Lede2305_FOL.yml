#
# 2025.11.01  编译 Lede-23.05-ARMv8_FOL
#
name: 编译Lede2305_FOL
on:
  repository_dispatch:
  workflow_dispatch:
# 定时触发开始编译(把下面两个#去掉开启,时间设置请看定时编译说明)
#  schedule:
#   - cron: 0 16 */2 * *

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: aarch64/Lede2305/feeds.conf.default
  CONFIG_FILE: aarch64/Lede2305/Lede2305_FOL.config
  DIY_P1_SH: aarch64/Lede2305/2305diy-part1.sh
  DIY_P2_SH: aarch64/Lede2305/2305diy-part2.sh
  TZ: Asia/Shanghai
  FILE_NAME: Build2305
  PRODUCT_NAME: Build2305_FOL

jobs:
  build:
    runs-on: ubuntu-24.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    name: 编译Lede2305
    strategy:
      fail-fast: false
      
    steps:
    - name: 释放磁盘空间之前
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: "优化磁盘空间"
      uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.1"
      with:
        operate_sudo: "True"
        general_include: ".+"
        general_exclude: |-
          ^GCC$
          ^G\+\+$
          Clang
          LLVM
        docker_include: ".+"
        docker_prune: "True"
        docker_clean: "True"
        apt_prune: "True"
        apt_clean: "True"
        homebrew_prune: "True"
        homebrew_clean: "True"
        npm_prune: "True"
        npm_clean: "True"
        os_swap: "True"
       # swap-size-mb: 1建议改为 swap-size-mb: 0 或移除该参数（默认不创建 swap）。当前值可能导致 Actions 警告或无效操作
    - name: 释放磁盘空间
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 3072
        swap-size-mb: 1
        remove-dotnet: "true"
        remove-android: "true"
        remove-haskell: "true"
        remove-codeql: "true"
        remove-docker-images: "true"

    - name: 释放磁盘空间完成
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: 准备
      uses: actions/checkout@v4

    - name: 部署编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi -f $(docker images -q) 2>/dev/null || true
        [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android 2>/dev/null
        sudo swapoff -a
        sudo rm -f /swapfile /mnt/swapfile
        #编译失败于空间不足，建议在“部署编译环境”前添加更多清理命令
        sudo rm -rf /usr/share/dotnet /opt/hostedtoolcache /usr/local/.ghcup /usr/local/share/powershell /usr/local/share/chromium /usr/local/lib/android /usr/local/lib/node_modules
        sudo -E apt-get -y update
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y install $(curl -fsSL https://ophub.org/ubuntu2404-make-openwrt-depends)
        sudo -E systemctl daemon-reload
        #sudo -E apt-get -y full-upgrade
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
        sudo rm -rf ~/{.cargo,.dotnet,.rustup}
        sudo -E timedatectl set-timezone "${TZ:-Etc/UTC}"
        sudo -E ntpdate ntp.ubuntu.com 0.pool.ntp.org || true
        sudo -E timedatectl set-ntp true
        date -u
        timedatectl status || true
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        echo "status=success" >> $GITHUB_OUTPUT
        df -Th

    # - name: 检查服务器性能
      # run: |
        # echo "警告⚠"
        # echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        # echo "已知编译成功CPU型号：8370C,8171M"
        # echo "已知性能不足CPU型号：8272CL"
        # echo -e "-------------- ------------CPU信息------------------------------------------\n"
        # echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        # echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        # echo "-------------------------------内存信息-------------------------------------------"
        # echo "已安装内存详细信息："
        # sudo lshw -short -C memory | grep GiB
        # echo -e "\n"
        # echo "-----------------------------硬盘信息---------------------------------------------"
        # echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        # echo "硬盘详情："
        # df -Th

    - name: 下载源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "DATE1=$(date "+%Y-%m-%d")" >> $GITHUB_ENV

#    - name: 缓存加速
#      uses: klever1988/cachewrtbuild@main
#      with:
#        ccache: 'true'
#        clean: 'false'
#        prefix: ${{ github.workspace }}/openwrt

#    - name: 加载自定义配置
#      run: |
#        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
#        chmod +x $DIY_P1_SH
#        cd openwrt
#        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新软件包
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装软件包
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载自定义配置
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
#        sed -i 's/192.168.1.1/192.168.2.1/g' package/base-files/files/bin/config_generate
#        sed -i 's/OpenWrt/MRG AutoBuild ${{ env.DATE1 }} @ OpenWrt/g' package/lean/default-settings/files/zzz-default-settings
        
    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        rm -rf $GITHUB_WORKSPACE/.git
        rm -rf $GITHUB_WORKSPACE/opt
        df -Th

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "DATE_YMD=_$(date +"%Y%m%d")" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

#    - name: 清理服务器空间
#      if: steps.compile.outputs.status == 'success' && !cancelled()
#      run: |
#        cd openwrt/
#        rm -rf $(ls . | grep -v "^bin$" | xargs) 2>/dev/null
#        df -hT ${PWD}

    - name: 整理固件文件夹
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd $GITHUB_WORKSPACE/openwrt/bin/packages
        tar -zcvf AllPackages.tar.gz ./*
        cp AllPackages.tar.gz $GITHUB_WORKSPACE/openwrt/bin/targets/*/*
        cd $GITHUB_WORKSPACE/openwrt/bin/targets/*/*
        rm -rf packages sha256sums feeds.buildinfo openwrt-armvirt-64-default.manifest openwrt-armvirt-64-Image openwrt-armvirt-64-rootfs-ext4.img version.buildinfo openwrt-armvirt-64-generic-initramfs-kernel.bin openwrt-armvirt-64-generic-kernel.bin openwrt-armvirt-64-generic.manifest profiles.json
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 固件发布信息
      id: release
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.FILE_NAME }}
        allowUpdates: true
        tag: ${{ env.FILE_NAME }}
        commit: master
        token: ${{ secrets.RELEASES_TOKEN }}
        body: |
          编译Lede 23.05固件，Flippy打包用！
          当前使用版本:【编译前的最后一次[➦主源码](https://github.com/coolsnowwolf/lede)更新记录】
          ${{ env.useVersionInfo }}
        artifacts: ${{ env.FIRMWARE }}/*

    - name: 电报机器人信息通知
      if: steps.organize.outputs.status == 'success' && !cancelled()
      run: curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }}编译完成" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
