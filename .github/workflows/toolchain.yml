#
# 分离工具链构建 工具链工作流 (toolchain.yml)
# 2025.07.22
#
name: toolchain编译工具链
on:
  workflow_dispatch:  # 手动触发，支持输入参数 允许用户指定是否强制编译工具链或选择特定架构（如 aarch64）
    inputs:
      force_rebuild:
        description: '是否强制重新编译工具链'
        required: false
        default: 'false'
      target_arch:
        description: '目标架构 (默认: aarch64)'
        required: false
        default: 'aarch64'
  push:
    branches:
      - master
    paths:
      - 'aarch64/Lede1806/Lede1806_FOL.config'  # 配置文件变化
      - 'aarch64/Lede1806/feeds.conf.default'   # 软件包源变化
      - 'aarch64/Lede1806/1806diy-part1.sh'     # DIY 脚本变化
      - 'aarch64/Lede1806/1806diy-part2.sh'
      - '.github/workflows/build.yml'            # 主工作流变化
  schedule:
    - cron: '0 0 * * 0'  # 每周日凌晨检查，处理源码更新

jobs:
  build-toolchain:
    runs-on: ubuntu-22.04
    if: github.event_name == 'workflow_dispatch' || github.event.inputs.force_rebuild == 'true' || contains(github.event.head_commit.message, 'toolchain') || contains(github.event.head_commit.message, 'aarch64')
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 部署编译环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* firefox google* dotnet* powershell* openjdk* mysql* mongodb* dotnet* snap* aspnetcore*
          sudo -E apt update
          sudo -E apt-get -y install build-essential gcc-11 g++-11 libstdc++-11-dev gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libncurses5-dev gawk git subversion gettext libssl-dev zlib1g-dev flex bison clang llvm
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo timedatectl set-timezone "Asia/Shanghai"

      - name: 创建模拟物理磁盘
        run: |
          mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
          root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
          sudo truncate -s "${mnt_size}"G /mnt/mnt.img
          sudo truncate -s "${root_size}"G /root.img
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6
          sudo pvcreate /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner
          sudo mkdir -p /workdir
          sudo mount /dev/github/runner /workdir
          sudo chown -R runner.runner /workdir
          df -Th

      - name: 下载源码
        working-directory: /workdir
        run: |
          git clone https://github.com/coolsnowwolf/lede -b master openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: 调试配置文件
        run: |
          echo "检查 aarch64/Lede1806/Lede1806_FOL.config 架构..."
          grep "CONFIG_TARGET" aarch64/Lede1806/Lede1806_FOL.config
          grep "CONFIG_ARCH" aarch64/Lede1806/Lede1806_FOL.config

      - name: 加载配置文件
        run: |
          [ -e aarch64/Lede1806/feeds.conf.default ] && cp aarch64/Lede1806/feeds.conf.default openwrt/feeds.conf.default
          [ -e aarch64/Lede1806/Lede1806_FOL.config ] && cp aarch64/Lede1806/Lede1806_FOL.config openwrt/.config
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          make defconfig
          # 强制设置 aarch64 架构
          ./scripts/config -e CONFIG_TARGET_armvirt
          ./scripts/config -e CONFIG_TARGET_armvirt_64
          ./scripts/config -s CONFIG_ARCH "aarch64"
          ./scripts/config -s CONFIG_TARGET_ARCH_PACKAGES "aarch64_generic"
          echo "检查 defconfig 后架构..."
          grep "CONFIG_TARGET" .config
          grep "CONFIG_ARCH" .config

      - name: 编译工具链
        run: |
          cd openwrt
          export CROSS_COMPILE=aarch64-linux-gnu-
          export ARCH=aarch64
          export CONFIG_TARGET_ARCH_PACKAGES=aarch64_generic
          make -j$(nproc) toolchain/install V=s

      - name: 上传工具链
        uses: actions/upload-artifact@v4
        with:
          name: toolchain-aarch64
          path: openwrt/staging_dir/toolchain*
          retention-days: 30
